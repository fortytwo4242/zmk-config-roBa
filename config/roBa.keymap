#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E         &kp R        &kp T                                                          &kp Y            &kp U  &lt 5 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D         &kp F        &kp G        &tog 4                      &kp LS(MINUS)         &kp H            &kp J  &lt 1 K    &lt 5 L  &mt RIGHT_CONTROL MINUS
&mt LEFT_SHIFT Z    &kp X         &kp C         &kp V        &kp B        &kp ASTERISK                &kp LEFT_PARENTHESIS  &kp N            &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&lt 6 ESCAPE        &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 LANG2  &lt 1 SPACE  &mt LEFT_ALT LC(SPACE)      &lt 1 ENTER           &lt 2 BACKSPACE                             &lt 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUMBER {
            bindings = <
&kp NUMBER_1                  &kp NUMBER_2      &kp NUMBER_3             &kp NUMBER_4   &kp NUMBER_5                                          &kp NUMBER_6     &kp NUMBER_7  &kp NUMBER_8       &kp NUMBER_9      &kp NUMBER_0
&mt LEFT_CONTROL EXCLAMATION  &kp LEFT_BRACKET  &kp HASH                 &kp DOLLAR     &kp PERCENT     &trans                 &kp LS(SLASH)  &kp CARET        &mkp MB1      &kp DOUBLE_QUOTES  &mkp MB2          &mt RIGHT_CONTROL LS(INTERNATIONAL_1)
&mt LEFT_SHIFT EQUAL          &kp PLUS          &kp LS(INTERNATIONAL_3)  &kp AMPERSAND  &kp LEFT_BRACE  &kp RIGHT_BRACKET      &kp BACKSLASH  &kp COLON        &kp AT_SIGN   &kp SEMICOLON      &kp SINGLE_QUOTE  &mt RIGHT_SHIFT INTERNATIONAL_3
&trans                        &trans            &trans                   &trans         &trans          &trans                 &trans         &lt 3 BACKSPACE                                                     &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5                                           &kp F6    &kp F7    &kp F8             &kp F9           &kp F10
&kp LC(A)  &kp LC(S)  &kp LC(H)  &kp LC(F)  &kp ESCAPE   &kp C_MUTE           &kp LS(LG(S))  &kp LEFT  &kp DOWN  &kp UP             &kp RIGHT        &kp F11
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)    &kp RIGHT_BRACE      &kp PIPE       &trans    &trans    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp F12
&trans     &trans     &trans     &trans     &lt 3 SPACE  &trans               &trans         &trans                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        ETC {
            bindings = <
&trans       &trans    &kp UP    &trans     &trans                                       &trans         &trans    &trans     &trans         &trans
&kp LG(TAB)  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans             &trans            &kp LG(LEFT)   &kp LEFT  &kp RIGHT  &kp LG(RIGHT)  &trans
&trans       &trans    &trans    &trans     &trans  &kp LESS_THAN      &kp GREATER_THAN  &trans         &trans    &trans     &trans         &trans
&trans       &trans    &trans    &trans     &trans  &trans             &trans            &kp BACKSPACE                                      &kp LC(LA(DELETE))
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        ETC2 {
            bindings = <
&trans  &trans    &kp UP    &trans     &trans                      &trans  &trans    &trans  &trans    &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &tog 4      &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans    &trans    &trans     &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans    &trans    &trans     &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SYSTEM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans           &trans       &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4
&trans  &trans  &trans  &trans  &trans  &bootloader      &bootloader  &trans         &trans         &trans         &trans         &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans           &trans       &trans                                                      &bt BT_CLR_ALL
            >;
        };
    };
};
